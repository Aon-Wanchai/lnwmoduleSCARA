
SCARA_Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d8  080036d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e0  080036e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  080036f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080036f4  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfb1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da7  00000000  00000000  0002cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0002fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002151c  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dce9  00000000  00000000  00051d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd448  00000000  00000000  0005fa55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ce9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a44  00000000  00000000  0012cef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036a8 	.word	0x080036a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080036a8 	.word	0x080036a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fe16 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f842 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fb14 	bl	8000b34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 fabe 	bl	8000a8c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000510:	f000 f8e4 	bl	80006dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000514:	f000 f982 	bl	800081c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000518:	f000 f9cc 	bl	80008b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800051c:	f000 fa40 	bl	80009a0 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000520:	f000 f8a6 	bl	8000670 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000524:	f000 fadc 	bl	8000ae0 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_WritePin(GPIOC, LED1_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <main+0x84>)
 800052e:	f001 f90f 	bl	8001750 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f000 fe6d 	bl	8001214 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, LED1_Pin, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2101      	movs	r1, #1
 800053e:	4810      	ldr	r0, [pc, #64]	; (8000580 <main+0x84>)
 8000540:	f001 f906 	bl	8001750 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	2101      	movs	r1, #1
 8000548:	480e      	ldr	r0, [pc, #56]	; (8000584 <main+0x88>)
 800054a:	f001 f901 	bl	8001750 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f000 fe5f 	bl	8001214 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0x88>)
 800055c:	f001 f8f8 	bl	8001750 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, LED3_Pin, 1);
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <main+0x8c>)
 8000566:	f001 f8f3 	bl	8001750 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800056a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800056e:	f000 fe51 	bl	8001214 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED3_Pin, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2110      	movs	r1, #16
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <main+0x8c>)
 8000578:	f001 f8ea 	bl	8001750 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, LED1_Pin, 1);
 800057c:	e7d4      	b.n	8000528 <main+0x2c>
 800057e:	bf00      	nop
 8000580:	40020800 	.word	0x40020800
 8000584:	40020400 	.word	0x40020400
 8000588:	40020000 	.word	0x40020000

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 f87c 	bl	8003698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <SystemClock_Config+0xdc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a2b      	ldr	r2, [pc, #172]	; (8000668 <SystemClock_Config+0xdc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <SystemClock_Config+0xdc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <SystemClock_Config+0xe0>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SystemClock_Config+0xe0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000600:	23b4      	movs	r3, #180	; 0xb4
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fbd1 	bl	8001dbc <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000620:	f000 fb3e 	bl	8000ca0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000624:	f001 f8ae 	bl	8001784 <HAL_PWREx_EnableOverDrive>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800062e:	f000 fb37 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f8e7 	bl	8001824 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800065c:	f000 fb20 	bl	8000ca0 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_SPI2_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <MX_SPI2_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_SPI2_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_SPI2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_SPI2_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_SPI2_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_SPI2_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_SPI2_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_SPI2_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SPI2_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_SPI2_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_SPI2_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_SPI2_Init+0x64>)
 80006c2:	f001 fdd5 	bl	8002270 <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 fae8 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000028 	.word	0x20000028
 80006d8:	40003800 	.word	0x40003800

080006dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b096      	sub	sp, #88	; 0x58
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f002 ffbf 	bl	8003698 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071a:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <MX_TIM1_Init+0x138>)
 800071c:	4a3e      	ldr	r2, [pc, #248]	; (8000818 <MX_TIM1_Init+0x13c>)
 800071e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000720:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <MX_TIM1_Init+0x138>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <MX_TIM1_Init+0x138>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800072c:	4b39      	ldr	r3, [pc, #228]	; (8000814 <MX_TIM1_Init+0x138>)
 800072e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000732:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b37      	ldr	r3, [pc, #220]	; (8000814 <MX_TIM1_Init+0x138>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073a:	4b36      	ldr	r3, [pc, #216]	; (8000814 <MX_TIM1_Init+0x138>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b34      	ldr	r3, [pc, #208]	; (8000814 <MX_TIM1_Init+0x138>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000746:	4833      	ldr	r0, [pc, #204]	; (8000814 <MX_TIM1_Init+0x138>)
 8000748:	f001 fdf6 	bl	8002338 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000752:	f000 faa5 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800075c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000760:	4619      	mov	r1, r3
 8000762:	482c      	ldr	r0, [pc, #176]	; (8000814 <MX_TIM1_Init+0x138>)
 8000764:	f001 ff0e 	bl	8002584 <HAL_TIM_ConfigClockSource>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800076e:	f000 fa97 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000772:	4828      	ldr	r0, [pc, #160]	; (8000814 <MX_TIM1_Init+0x138>)
 8000774:	f001 fe0b 	bl	800238e <HAL_TIM_PWM_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800077e:	f000 fa8f 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800078e:	4619      	mov	r1, r3
 8000790:	4820      	ldr	r0, [pc, #128]	; (8000814 <MX_TIM1_Init+0x138>)
 8000792:	f002 faa5 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800079c:	f000 fa80 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a0:	2360      	movs	r3, #96	; 0x60
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c0:	2204      	movs	r2, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <MX_TIM1_Init+0x138>)
 80007c6:	f001 fe17 	bl	80023f8 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007d0:	f000 fa66 	bl	8000ca0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <MX_TIM1_Init+0x138>)
 80007f8:	f002 faee 	bl	8002dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000802:	f000 fa4d 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <MX_TIM1_Init+0x138>)
 8000808:	f000 fb22 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	; 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000140 	.word	0x20000140
 8000818:	40010000 	.word	0x40010000

0800081c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM2_Init+0x94>)
 800083a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_TIM2_Init+0x94>)
 800084e:	f04f 32ff 	mov.w	r2, #4294967295
 8000852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_TIM2_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000862:	f001 fd69 	bl	8002338 <HAL_TIM_Base_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800086c:	f000 fa18 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_TIM2_Init+0x94>)
 800087e:	f001 fe81 	bl	8002584 <HAL_TIM_ConfigClockSource>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 fa0a 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_TIM2_Init+0x94>)
 800089a:	f002 fa21 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008a4:	f000 f9fc 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000180 	.word	0x20000180

080008b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_TIM3_Init+0xe4>)
 80008e6:	4a2d      	ldr	r2, [pc, #180]	; (800099c <MX_TIM3_Init+0xe8>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_TIM3_Init+0xe4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_TIM3_Init+0xe4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_TIM3_Init+0xe4>)
 80008f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_TIM3_Init+0xe4>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_TIM3_Init+0xe4>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800090a:	4823      	ldr	r0, [pc, #140]	; (8000998 <MX_TIM3_Init+0xe4>)
 800090c:	f001 fd14 	bl	8002338 <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000916:	f000 f9c3 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000924:	4619      	mov	r1, r3
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_TIM3_Init+0xe4>)
 8000928:	f001 fe2c 	bl	8002584 <HAL_TIM_ConfigClockSource>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000932:	f000 f9b5 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_TIM3_Init+0xe4>)
 8000938:	f001 fd29 	bl	800238e <HAL_TIM_PWM_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000942:	f000 f9ad 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	4619      	mov	r1, r3
 8000954:	4810      	ldr	r0, [pc, #64]	; (8000998 <MX_TIM3_Init+0xe4>)
 8000956:	f002 f9c3 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000960:	f000 f99e 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000964:	2360      	movs	r3, #96	; 0x60
 8000966:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM3_Init+0xe4>)
 800097c:	f001 fd3c 	bl	80023f8 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000986:	f000 f98b 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM3_Init+0xe4>)
 800098c:	f000 fa60 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 8000990:	bf00      	nop
 8000992:	3738      	adds	r7, #56	; 0x38
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000100 	.word	0x20000100
 800099c:	40000400 	.word	0x40000400

080009a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <MX_TIM4_Init+0xe4>)
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_TIM4_Init+0xe8>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <MX_TIM4_Init+0xe4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_TIM4_Init+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_TIM4_Init+0xe4>)
 80009e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_TIM4_Init+0xe4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_TIM4_Init+0xe4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009f6:	4823      	ldr	r0, [pc, #140]	; (8000a84 <MX_TIM4_Init+0xe4>)
 80009f8:	f001 fc9e 	bl	8002338 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a02:	f000 f94d 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_TIM4_Init+0xe4>)
 8000a14:	f001 fdb6 	bl	8002584 <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a1e:	f000 f93f 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <MX_TIM4_Init+0xe4>)
 8000a24:	f001 fcb3 	bl	800238e <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a2e:	f000 f937 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4810      	ldr	r0, [pc, #64]	; (8000a84 <MX_TIM4_Init+0xe4>)
 8000a42:	f002 f94d 	bl	8002ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a4c:	f000 f928 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM4_Init+0xe4>)
 8000a68:	f001 fcc6 	bl	80023f8 <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a72:	f000 f915 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM4_Init+0xe4>)
 8000a78:	f000 f9ea 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 8000a7c:	bf00      	nop
 8000a7e:	3738      	adds	r7, #56	; 0x38
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000080 	.word	0x20000080
 8000a88:	40000800 	.word	0x40000800

08000a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_USART2_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f002 f9da 	bl	8002e7c <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f8e7 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001c0 	.word	0x200001c0
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_USART3_UART_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART3_UART_Init+0x4c>)
 8000b18:	f002 f9b0 	bl	8002e7c <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b22:	f000 f8bd 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000c0 	.word	0x200000c0
 8000b30:	40004800 	.word	0x40004800

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b4f      	ldr	r3, [pc, #316]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b4c      	ldr	r3, [pc, #304]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b48      	ldr	r3, [pc, #288]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a47      	ldr	r2, [pc, #284]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b3e      	ldr	r3, [pc, #248]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x158>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|DIR_M2_Pin|MAX485_CONTROL_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f241 0181 	movw	r1, #4225	; 0x1081
 8000bc0:	4833      	ldr	r0, [pc, #204]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000bc2:	f000 fdc5 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|DIR_M4_Pin|DIR_M3_Pin|DIR_M1_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000bcc:	4831      	ldr	r0, [pc, #196]	; (8000c94 <MX_GPIO_Init+0x160>)
 8000bce:	f000 fdbf 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SPI2_SS_Pin|PUL_M1_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f240 4103 	movw	r1, #1027	; 0x403
 8000bd8:	482f      	ldr	r0, [pc, #188]	; (8000c98 <MX_GPIO_Init+0x164>)
 8000bda:	f000 fdb9 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_GPIO_Init+0x168>)
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4827      	ldr	r0, [pc, #156]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000bf4:	f000 fc18 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DIR_M2_Pin MAX485_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DIR_M2_Pin|MAX485_CONTROL_Pin;
 8000bf8:	f241 0381 	movw	r3, #4225	; 0x1081
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000c12:	f000 fc09 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000c16:	2304      	movs	r3, #4
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4819      	ldr	r0, [pc, #100]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000c2a:	f000 fbfd 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : Current_sensor_Pin */
  GPIO_InitStruct.Pin = Current_sensor_Pin;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c32:	2303      	movs	r3, #3
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4813      	ldr	r0, [pc, #76]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000c42:	f000 fbf1 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin DIR_M4_Pin DIR_M3_Pin DIR_M1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|DIR_M4_Pin|DIR_M3_Pin|DIR_M1_Pin;
 8000c46:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_GPIO_Init+0x160>)
 8000c60:	f000 fbe2 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin SPI2_SS_Pin PUL_M1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|SPI2_SS_Pin|PUL_M1_Pin;
 8000c64:	f240 4303 	movw	r3, #1027	; 0x403
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_GPIO_Init+0x164>)
 8000c7e:	f000 fbd3 	bl	8001428 <HAL_GPIO_Init>

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	10210000 	.word	0x10210000

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cea:	2007      	movs	r0, #7
 8000cec:	f000 fb68 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_SPI_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12c      	bne.n	8000d78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_SPI_MspInit+0x8c>)
 8000d74:	f000 fb58 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40003800 	.word	0x40003800
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020400 	.word	0x40020400

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <HAL_TIM_Base_MspInit+0xb4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10e      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dba:	e03a      	b.n	8000e32 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d10e      	bne.n	8000de4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
}
 8000de2:	e026      	b.n	8000e32 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_TIM_Base_MspInit+0xbc>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10e      	bne.n	8000e0c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
}
 8000e0a:	e012      	b.n	8000e32 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_TIM_Base_MspInit+0xc0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10d      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_TIM_Base_MspInit+0xb8>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
}
 8000e32:	bf00      	nop
 8000e34:	371c      	adds	r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40010000 	.word	0x40010000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40000400 	.word	0x40000400
 8000e4c:	40000800 	.word	0x40000800

08000e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <HAL_TIM_MspPostInit+0xf8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d11f      	bne.n	8000eb2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a34      	ldr	r2, [pc, #208]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PUL_M2_Pin;
 8000e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PUL_M2_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4829      	ldr	r0, [pc, #164]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000eac:	f000 fabc 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000eb0:	e046      	b.n	8000f40 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_TIM_MspPostInit+0x104>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d11e      	bne.n	8000efa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PUL_M4_Pin;
 8000ed8:	2340      	movs	r3, #64	; 0x40
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PUL_M4_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4817      	ldr	r0, [pc, #92]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000ef4:	f000 fa98 	bl	8001428 <HAL_GPIO_Init>
}
 8000ef8:	e022      	b.n	8000f40 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <HAL_TIM_MspPostInit+0x108>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d11d      	bne.n	8000f40 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PUL_M3_Pin;
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f30:	2302      	movs	r3, #2
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PUL_M3_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <HAL_TIM_MspPostInit+0x10c>)
 8000f3c:	f000 fa74 	bl	8001428 <HAL_GPIO_Init>
}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <HAL_UART_MspInit+0xe8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12c      	bne.n	8000fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_UART_MspInit+0xec>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_UART_MspInit+0xec>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_UART_MspInit+0xec>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_UART_MspInit+0xec>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a29      	ldr	r2, [pc, #164]	; (800104c <HAL_UART_MspInit+0xec>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_UART_MspInit+0xec>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481e      	ldr	r0, [pc, #120]	; (8001050 <HAL_UART_MspInit+0xf0>)
 8000fd6:	f000 fa27 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fda:	e031      	b.n	8001040 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_UART_MspInit+0xf4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12c      	bne.n	8001040 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0xec>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_UART_MspInit+0xec>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_MspInit+0xec>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0xec>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_UART_MspInit+0xec>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_UART_MspInit+0xec>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAX485_TX_Pin|MAX485_RX_Pin;
 800101e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001030:	2307      	movs	r3, #7
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <HAL_UART_MspInit+0xf8>)
 800103c:	f000 f9f4 	bl	8001428 <HAL_GPIO_Init>
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40004400 	.word	0x40004400
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40004800 	.word	0x40004800
 8001058:	40020800 	.word	0x40020800

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f894 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <SystemInit+0x28>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <SystemInit+0x28>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SystemInit+0x28>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	609a      	str	r2, [r3, #8]
#endif
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010e2:	e003      	b.n	80010ec <LoopCopyDataInit>

080010e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ea:	3104      	adds	r1, #4

080010ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010f4:	d3f6      	bcc.n	80010e4 <CopyDataInit>
  ldr  r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010f8:	e002      	b.n	8001100 <LoopFillZerobss>

080010fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010fc:	f842 3b04 	str.w	r3, [r2], #4

08001100 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001102:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001104:	d3f9      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001106:	f7ff ffd3 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f002 faa1 	bl	8003650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff f9f5 	bl	80004fc <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001118:	080036e8 	.word	0x080036e8
  ldr  r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001120:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001124:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001128:	20000204 	.word	0x20000204

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f931 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fda2 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f93b 	bl	800140e <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f911 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000200 	.word	0x20000200

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000200 	.word	0x20000200

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff47 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff5c 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffb0 	bl	800137c <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e165      	b.n	8001710 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001444:	2201      	movs	r2, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8154 	bne.w	800170a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d00b      	beq.n	8001482 <HAL_GPIO_Init+0x5a>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001476:	2b11      	cmp	r3, #17
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b12      	cmp	r3, #18
 8001480:	d130      	bne.n	80014e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0xfc>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b12      	cmp	r3, #18
 8001522:	d123      	bne.n	800156c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	08da      	lsrs	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3208      	adds	r2, #8
 800152c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	69b9      	ldr	r1, [r7, #24]
 8001568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80ae 	beq.w	800170a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_GPIO_Init+0x300>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a5c      	ldr	r2, [pc, #368]	; (8001728 <HAL_GPIO_Init+0x300>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_GPIO_Init+0x300>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_GPIO_Init+0x304>)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <HAL_GPIO_Init+0x308>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d025      	beq.n	8001642 <HAL_GPIO_Init+0x21a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4e      	ldr	r2, [pc, #312]	; (8001734 <HAL_GPIO_Init+0x30c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01f      	beq.n	800163e <HAL_GPIO_Init+0x216>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x310>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d019      	beq.n	800163a <HAL_GPIO_Init+0x212>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x314>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_GPIO_Init+0x318>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00d      	beq.n	8001632 <HAL_GPIO_Init+0x20a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_GPIO_Init+0x31c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d007      	beq.n	800162e <HAL_GPIO_Init+0x206>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_GPIO_Init+0x320>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <HAL_GPIO_Init+0x202>
 8001626:	2306      	movs	r3, #6
 8001628:	e00c      	b.n	8001644 <HAL_GPIO_Init+0x21c>
 800162a:	2307      	movs	r3, #7
 800162c:	e00a      	b.n	8001644 <HAL_GPIO_Init+0x21c>
 800162e:	2305      	movs	r3, #5
 8001630:	e008      	b.n	8001644 <HAL_GPIO_Init+0x21c>
 8001632:	2304      	movs	r3, #4
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x21c>
 8001636:	2303      	movs	r3, #3
 8001638:	e004      	b.n	8001644 <HAL_GPIO_Init+0x21c>
 800163a:	2302      	movs	r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x21c>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x21c>
 8001642:	2300      	movs	r3, #0
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4093      	lsls	r3, r2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001654:	4935      	ldr	r1, [pc, #212]	; (800172c <HAL_GPIO_Init+0x304>)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_GPIO_Init+0x324>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001686:	4a31      	ldr	r2, [pc, #196]	; (800174c <HAL_GPIO_Init+0x324>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800168c:	4b2f      	ldr	r3, [pc, #188]	; (800174c <HAL_GPIO_Init+0x324>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <HAL_GPIO_Init+0x324>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_GPIO_Init+0x324>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_GPIO_Init+0x324>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_GPIO_Init+0x324>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001704:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_GPIO_Init+0x324>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	f67f ae96 	bls.w	8001444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40021400 	.word	0x40021400
 8001748:	40021800 	.word	0x40021800
 800174c:	40013c00 	.word	0x40013c00

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_PWREx_EnableOverDrive+0x90>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_PWREx_EnableOverDrive+0x90>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_PWREx_EnableOverDrive+0x90>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_PWREx_EnableOverDrive+0x94>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7ff fd24 	bl	80011fc <HAL_GetTick>
 80017b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017b6:	e009      	b.n	80017cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017b8:	f7ff fd20 	bl	80011fc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c6:	d901      	bls.n	80017cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e01f      	b.n	800180c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_PWREx_EnableOverDrive+0x98>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d8:	d1ee      	bne.n	80017b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e0:	f7ff fd0c 	bl	80011fc <HAL_GetTick>
 80017e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017e6:	e009      	b.n	80017fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017e8:	f7ff fd08 	bl	80011fc <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f6:	d901      	bls.n	80017fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e007      	b.n	800180c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_PWREx_EnableOverDrive+0x98>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001808:	d1ee      	bne.n	80017e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	420e0040 	.word	0x420e0040
 800181c:	40007000 	.word	0x40007000
 8001820:	420e0044 	.word	0x420e0044

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0cc      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d90c      	bls.n	8001860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d044      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e067      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f023 0203 	bic.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4934      	ldr	r1, [pc, #208]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff fc72 	bl	80011fc <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff fc6e 	bl	80011fc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d20c      	bcs.n	800196c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f855 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490a      	ldr	r1, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fbd2 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	080036c0 	.word	0x080036c0
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000

08001a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a0c:	f7ff fff0 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4903      	ldr	r1, [pc, #12]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	080036d0 	.word	0x080036d0

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff ffdc 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0b5b      	lsrs	r3, r3, #13
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	080036d0 	.word	0x080036d0

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b088      	sub	sp, #32
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a74:	4bce      	ldr	r3, [pc, #824]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	f200 818d 	bhi.w	8001d9c <HAL_RCC_GetSysClockFreq+0x344>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <HAL_RCC_GetSysClockFreq+0x30>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001abd 	.word	0x08001abd
 8001a8c:	08001d9d 	.word	0x08001d9d
 8001a90:	08001d9d 	.word	0x08001d9d
 8001a94:	08001d9d 	.word	0x08001d9d
 8001a98:	08001ac3 	.word	0x08001ac3
 8001a9c:	08001d9d 	.word	0x08001d9d
 8001aa0:	08001d9d 	.word	0x08001d9d
 8001aa4:	08001d9d 	.word	0x08001d9d
 8001aa8:	08001ac9 	.word	0x08001ac9
 8001aac:	08001d9d 	.word	0x08001d9d
 8001ab0:	08001d9d 	.word	0x08001d9d
 8001ab4:	08001d9d 	.word	0x08001d9d
 8001ab8:	08001c3d 	.word	0x08001c3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4bbd      	ldr	r3, [pc, #756]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001abe:	61bb      	str	r3, [r7, #24]
       break;
 8001ac0:	e16f      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac2:	4bbd      	ldr	r3, [pc, #756]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x360>)
 8001ac4:	61bb      	str	r3, [r7, #24]
      break;
 8001ac6:	e16c      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac8:	4bb9      	ldr	r3, [pc, #740]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad2:	4bb7      	ldr	r3, [pc, #732]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d053      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4bb4      	ldr	r3, [pc, #720]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	ea02 0400 	and.w	r4, r2, r0
 8001af6:	603c      	str	r4, [r7, #0]
 8001af8:	400b      	ands	r3, r1
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	014b      	lsls	r3, r1, #5
 8001b0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b12:	0142      	lsls	r2, r0, #5
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	4623      	mov	r3, r4
 8001b1a:	1ac0      	subs	r0, r0, r3
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	eb61 0103 	sbc.w	r1, r1, r3
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	018b      	lsls	r3, r1, #6
 8001b2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b30:	0182      	lsls	r2, r0, #6
 8001b32:	1a12      	subs	r2, r2, r0
 8001b34:	eb63 0301 	sbc.w	r3, r3, r1
 8001b38:	f04f 0000 	mov.w	r0, #0
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	00d9      	lsls	r1, r3, #3
 8001b42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b46:	00d0      	lsls	r0, r2, #3
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	1852      	adds	r2, r2, r1
 8001b50:	4629      	mov	r1, r5
 8001b52:	eb43 0101 	adc.w	r1, r3, r1
 8001b56:	460b      	mov	r3, r1
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	0259      	lsls	r1, r3, #9
 8001b62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b66:	0250      	lsls	r0, r2, #9
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	f7fe fb44 	bl	8000204 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	e04c      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	4b8a      	ldr	r3, [pc, #552]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	ea02 0a00 	and.w	sl, r2, r0
 8001b9e:	ea03 0b01 	and.w	fp, r3, r1
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	4659      	mov	r1, fp
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	014b      	lsls	r3, r1, #5
 8001bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bb4:	0142      	lsls	r2, r0, #5
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	ebb0 000a 	subs.w	r0, r0, sl
 8001bbe:	eb61 010b 	sbc.w	r1, r1, fp
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	018b      	lsls	r3, r1, #6
 8001bcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bd0:	0182      	lsls	r2, r0, #6
 8001bd2:	1a12      	subs	r2, r2, r0
 8001bd4:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd8:	f04f 0000 	mov.w	r0, #0
 8001bdc:	f04f 0100 	mov.w	r1, #0
 8001be0:	00d9      	lsls	r1, r3, #3
 8001be2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001be6:	00d0      	lsls	r0, r2, #3
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	eb12 020a 	adds.w	r2, r2, sl
 8001bf0:	eb43 030b 	adc.w	r3, r3, fp
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0299      	lsls	r1, r3, #10
 8001bfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c02:	0290      	lsls	r0, r2, #10
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f7fe faf6 	bl	8000204 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c20:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	0c1b      	lsrs	r3, r3, #16
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	61bb      	str	r3, [r7, #24]
      break;
 8001c3a:	e0b2      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c3c:	4b5c      	ldr	r3, [pc, #368]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c46:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d04d      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c52:	4b57      	ldr	r3, [pc, #348]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	099b      	lsrs	r3, r3, #6
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	ea02 0800 	and.w	r8, r2, r0
 8001c6a:	ea03 0901 	and.w	r9, r3, r1
 8001c6e:	4640      	mov	r0, r8
 8001c70:	4649      	mov	r1, r9
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	014b      	lsls	r3, r1, #5
 8001c7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c80:	0142      	lsls	r2, r0, #5
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	ebb0 0008 	subs.w	r0, r0, r8
 8001c8a:	eb61 0109 	sbc.w	r1, r1, r9
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	018b      	lsls	r3, r1, #6
 8001c98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c9c:	0182      	lsls	r2, r0, #6
 8001c9e:	1a12      	subs	r2, r2, r0
 8001ca0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	00d9      	lsls	r1, r3, #3
 8001cae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cb2:	00d0      	lsls	r0, r2, #3
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	eb12 0208 	adds.w	r2, r2, r8
 8001cbc:	eb43 0309 	adc.w	r3, r3, r9
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	0259      	lsls	r1, r3, #9
 8001cca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cce:	0250      	lsls	r0, r2, #9
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	f7fe fa90 	bl	8000204 <__aeabi_uldivmod>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	e04a      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	ea02 0400 	and.w	r4, r2, r0
 8001d06:	ea03 0501 	and.w	r5, r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	014b      	lsls	r3, r1, #5
 8001d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d1c:	0142      	lsls	r2, r0, #5
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	1b00      	subs	r0, r0, r4
 8001d24:	eb61 0105 	sbc.w	r1, r1, r5
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	018b      	lsls	r3, r1, #6
 8001d32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d36:	0182      	lsls	r2, r0, #6
 8001d38:	1a12      	subs	r2, r2, r0
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	00d9      	lsls	r1, r3, #3
 8001d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d4c:	00d0      	lsls	r0, r2, #3
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	1912      	adds	r2, r2, r4
 8001d54:	eb45 0303 	adc.w	r3, r5, r3
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	0299      	lsls	r1, r3, #10
 8001d62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d66:	0290      	lsls	r0, r2, #10
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	f7fe fa44 	bl	8000204 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0f1b      	lsrs	r3, r3, #28
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	61bb      	str	r3, [r7, #24]
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d9e:	61bb      	str	r3, [r7, #24]
      break;
 8001da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da2:	69bb      	ldr	r3, [r7, #24]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	007a1200 	.word	0x007a1200

08001dbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8083 	beq.w	8001edc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dd6:	4b95      	ldr	r3, [pc, #596]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de2:	4b92      	ldr	r3, [pc, #584]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d106      	bne.n	8001dfc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dee:	4b8f      	ldr	r3, [pc, #572]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dfa:	d00c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfc:	4b8b      	ldr	r3, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d112      	bne.n	8001e2e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e08:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e14:	d10b      	bne.n	8001e2e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4b85      	ldr	r3, [pc, #532]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d05b      	beq.n	8001eda <HAL_RCC_OscConfig+0x11e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d157      	bne.n	8001eda <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e216      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x8a>
 8001e38:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7b      	ldr	r2, [pc, #492]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e01d      	b.n	8001e82 <HAL_RCC_OscConfig+0xc6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4e:	d10c      	bne.n	8001e6a <HAL_RCC_OscConfig+0xae>
 8001e50:	4b76      	ldr	r3, [pc, #472]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a75      	ldr	r2, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b73      	ldr	r3, [pc, #460]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a72      	ldr	r2, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e00b      	b.n	8001e82 <HAL_RCC_OscConfig+0xc6>
 8001e6a:	4b70      	ldr	r3, [pc, #448]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6f      	ldr	r2, [pc, #444]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6c      	ldr	r2, [pc, #432]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d013      	beq.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f9b7 	bl	80011fc <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e92:	f7ff f9b3 	bl	80011fc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1db      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea4:	4b61      	ldr	r3, [pc, #388]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0xd6>
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f9a3 	bl	80011fc <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eba:	f7ff f99f 	bl	80011fc <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	; 0x64
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1c7      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ecc:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0xfe>
 8001ed8:	e000      	b.n	8001edc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d06f      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef4:	4b4d      	ldr	r3, [pc, #308]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f00:	4b4a      	ldr	r3, [pc, #296]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0c:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d11c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f18:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d116      	bne.n	8001f52 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_OscConfig+0x180>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e18f      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4938      	ldr	r1, [pc, #224]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f50:	e03a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f94c 	bl	80011fc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f68:	f7ff f948 	bl	80011fc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e170      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4925      	ldr	r1, [pc, #148]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
 8001f9a:	e015      	b.n	8001fc8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f92b 	bl	80011fc <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff f927 	bl	80011fc <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e14f      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d037      	beq.n	8002044 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d016      	beq.n	800200a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_RCC_OscConfig+0x278>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f90b 	bl	80011fc <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff f907 	bl	80011fc <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e12f      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x22e>
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_RCC_OscConfig+0x278>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002010:	f7ff f8f4 	bl	80011fc <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002016:	e00f      	b.n	8002038 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002018:	f7ff f8f0 	bl	80011fc <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d908      	bls.n	8002038 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e118      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	42470000 	.word	0x42470000
 8002034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e9      	bne.n	8002018 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 8097 	beq.w	8002180 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b83      	ldr	r3, [pc, #524]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a7e      	ldr	r2, [pc, #504]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b79      	ldr	r3, [pc, #484]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d118      	bne.n	80020c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7ff f8af 	bl	80011fc <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a2:	f7ff f8ab 	bl	80011fc <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0d3      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x4ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x31a>
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	e01c      	b.n	8002110 <HAL_RCC_OscConfig+0x354>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x33c>
 80020de:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a60      	ldr	r2, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0x354>
 80020f8:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	4a59      	ldr	r2, [pc, #356]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6713      	str	r3, [r2, #112]	; 0x70
 8002104:	4b57      	ldr	r3, [pc, #348]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a56      	ldr	r2, [pc, #344]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7ff f870 	bl	80011fc <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7ff f86c 	bl	80011fc <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e092      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ee      	beq.n	8002120 <HAL_RCC_OscConfig+0x364>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff f85a 	bl	80011fc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7ff f856 	bl	80011fc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e07c      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002162:	4b40      	ldr	r3, [pc, #256]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ee      	bne.n	800214c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a3a      	ldr	r2, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d068      	beq.n	800225a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d060      	beq.n	8002256 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d145      	bne.n	8002228 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff f82b 	bl	80011fc <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff f827 	bl	80011fc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e04f      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	019b      	lsls	r3, r3, #6
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	3b01      	subs	r3, #1
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	061b      	lsls	r3, r3, #24
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	071b      	lsls	r3, r3, #28
 80021f4:	491b      	ldr	r1, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fffc 	bl	80011fc <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fff8 	bl	80011fc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e020      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x44c>
 8002226:	e018      	b.n	800225a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_OscConfig+0x4b0>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe ffe5 	bl	80011fc <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe ffe1 	bl	80011fc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e009      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x4a8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x47a>
 8002254:	e001      	b.n	800225a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000
 800226c:	42470060 	.word	0x42470060

08002270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e056      	b.n	8002330 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7fe fd2d 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	ea42 0103 	orr.w	r1, r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	0c1b      	lsrs	r3, r3, #16
 8002300:	f003 0104 	and.w	r1, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e01d      	b.n	8002386 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fd14 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 f9c8 	bl	800270c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e01d      	b.n	80023dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f815 	bl	80023e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f000 f99d 	bl	800270c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800240e:	2302      	movs	r3, #2
 8002410:	e0b4      	b.n	800257c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	f200 809f 	bhi.w	8002568 <HAL_TIM_PWM_ConfigChannel+0x170>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002465 	.word	0x08002465
 8002434:	08002569 	.word	0x08002569
 8002438:	08002569 	.word	0x08002569
 800243c:	08002569 	.word	0x08002569
 8002440:	080024a5 	.word	0x080024a5
 8002444:	08002569 	.word	0x08002569
 8002448:	08002569 	.word	0x08002569
 800244c:	08002569 	.word	0x08002569
 8002450:	080024e7 	.word	0x080024e7
 8002454:	08002569 	.word	0x08002569
 8002458:	08002569 	.word	0x08002569
 800245c:	08002569 	.word	0x08002569
 8002460:	08002527 	.word	0x08002527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f9ee 	bl	800284c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6999      	ldr	r1, [r3, #24]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	619a      	str	r2, [r3, #24]
      break;
 80024a2:	e062      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fa3e 	bl	800292c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6999      	ldr	r1, [r3, #24]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	021a      	lsls	r2, r3, #8
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	619a      	str	r2, [r3, #24]
      break;
 80024e4:	e041      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fa93 	bl	8002a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0208 	orr.w	r2, r2, #8
 8002500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0204 	bic.w	r2, r2, #4
 8002510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69d9      	ldr	r1, [r3, #28]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
      break;
 8002524:	e021      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fae7 	bl	8002b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	69d9      	ldr	r1, [r3, #28]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	021a      	lsls	r2, r3, #8
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	61da      	str	r2, [r3, #28]
      break;
 8002566:	e000      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002568:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_TIM_ConfigClockSource+0x18>
 8002598:	2302      	movs	r3, #2
 800259a:	e0b3      	b.n	8002704 <HAL_TIM_ConfigClockSource+0x180>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d4:	d03e      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0xd0>
 80025d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025da:	f200 8087 	bhi.w	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	f000 8085 	beq.w	80026f0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d87f      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d01a      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0xa2>
 80025f0:	2b70      	cmp	r3, #112	; 0x70
 80025f2:	d87b      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d050      	beq.n	800269a <HAL_TIM_ConfigClockSource+0x116>
 80025f8:	2b60      	cmp	r3, #96	; 0x60
 80025fa:	d877      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d03c      	beq.n	800267a <HAL_TIM_ConfigClockSource+0xf6>
 8002600:	2b50      	cmp	r3, #80	; 0x50
 8002602:	d873      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d058      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0x136>
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d86f      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d064      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
 8002610:	2b30      	cmp	r3, #48	; 0x30
 8002612:	d86b      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d060      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
 8002618:	2b20      	cmp	r3, #32
 800261a:	d867      	bhi.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d05c      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
 8002620:	2b10      	cmp	r3, #16
 8002622:	d05a      	beq.n	80026da <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002624:	e062      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f000 fb33 	bl	8002ca0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002648:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	609a      	str	r2, [r3, #8]
      break;
 8002652:	e04e      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f000 fb1c 	bl	8002ca0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002676:	609a      	str	r2, [r3, #8]
      break;
 8002678:	e03b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	461a      	mov	r2, r3
 8002688:	f000 fa90 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2150      	movs	r1, #80	; 0x50
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fae9 	bl	8002c6a <TIM_ITRx_SetConfig>
      break;
 8002698:	e02b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f000 faaf 	bl	8002c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2160      	movs	r1, #96	; 0x60
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fad9 	bl	8002c6a <TIM_ITRx_SetConfig>
      break;
 80026b8:	e01b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f000 fa70 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fac9 	bl	8002c6a <TIM_ITRx_SetConfig>
      break;
 80026d8:	e00b      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f000 fac0 	bl	8002c6a <TIM_ITRx_SetConfig>
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a40      	ldr	r2, [pc, #256]	; (8002820 <TIM_Base_SetConfig+0x114>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d00f      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a3d      	ldr	r2, [pc, #244]	; (8002824 <TIM_Base_SetConfig+0x118>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00b      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <TIM_Base_SetConfig+0x11c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3b      	ldr	r2, [pc, #236]	; (800282c <TIM_Base_SetConfig+0x120>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <TIM_Base_SetConfig+0x124>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <TIM_Base_SetConfig+0x114>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d027      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <TIM_Base_SetConfig+0x118>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d023      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <TIM_Base_SetConfig+0x11c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2a      	ldr	r2, [pc, #168]	; (800282c <TIM_Base_SetConfig+0x120>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <TIM_Base_SetConfig+0x124>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d017      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a28      	ldr	r2, [pc, #160]	; (8002834 <TIM_Base_SetConfig+0x128>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <TIM_Base_SetConfig+0x12c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00f      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <TIM_Base_SetConfig+0x130>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a25      	ldr	r2, [pc, #148]	; (8002840 <TIM_Base_SetConfig+0x134>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a24      	ldr	r2, [pc, #144]	; (8002844 <TIM_Base_SetConfig+0x138>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a23      	ldr	r2, [pc, #140]	; (8002848 <TIM_Base_SetConfig+0x13c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d108      	bne.n	80027d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <TIM_Base_SetConfig+0x114>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0xf8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <TIM_Base_SetConfig+0x124>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00
 8002830:	40010400 	.word	0x40010400
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800
 8002840:	40001800 	.word	0x40001800
 8002844:	40001c00 	.word	0x40001c00
 8002848:	40002000 	.word	0x40002000

0800284c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0201 	bic.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0303 	bic.w	r3, r3, #3
 8002882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 0302 	bic.w	r3, r3, #2
 8002894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a20      	ldr	r2, [pc, #128]	; (8002924 <TIM_OC1_SetConfig+0xd8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_OC1_SetConfig+0x64>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <TIM_OC1_SetConfig+0xdc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d10c      	bne.n	80028ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 0308 	bic.w	r3, r3, #8
 80028b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a15      	ldr	r2, [pc, #84]	; (8002924 <TIM_OC1_SetConfig+0xd8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_OC1_SetConfig+0x8e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <TIM_OC1_SetConfig+0xdc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d111      	bne.n	80028fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	621a      	str	r2, [r3, #32]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40010000 	.word	0x40010000
 8002928:	40010400 	.word	0x40010400

0800292c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 0210 	bic.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f023 0320 	bic.w	r3, r3, #32
 8002976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <TIM_OC2_SetConfig+0xe4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_OC2_SetConfig+0x68>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <TIM_OC2_SetConfig+0xe8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d10d      	bne.n	80029b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <TIM_OC2_SetConfig+0xe4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_OC2_SetConfig+0x94>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <TIM_OC2_SetConfig+0xe8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d113      	bne.n	80029e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40010400 	.word	0x40010400

08002a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <TIM_OC3_SetConfig+0xe0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_OC3_SetConfig+0x66>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <TIM_OC3_SetConfig+0xe4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10d      	bne.n	8002a9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <TIM_OC3_SetConfig+0xe0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <TIM_OC3_SetConfig+0x92>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <TIM_OC3_SetConfig+0xe4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d113      	bne.n	8002ad2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	621a      	str	r2, [r3, #32]
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40010000 	.word	0x40010000
 8002afc:	40010400 	.word	0x40010400

08002b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	031b      	lsls	r3, r3, #12
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <TIM_OC4_SetConfig+0xa4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_OC4_SetConfig+0x68>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <TIM_OC4_SetConfig+0xa8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d109      	bne.n	8002b7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	019b      	lsls	r3, r3, #6
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40010400 	.word	0x40010400

08002bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 030a 	bic.w	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b087      	sub	sp, #28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 0210 	bic.w	r2, r3, #16
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	031b      	lsls	r3, r3, #12
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	621a      	str	r2, [r3, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f043 0307 	orr.w	r3, r3, #7
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	021a      	lsls	r2, r3, #8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e05a      	b.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d01d      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10c      	bne.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40000c00 	.word	0x40000c00
 8002dcc:	40010400 	.word	0x40010400
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40001800 	.word	0x40001800

08002dd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e03d      	b.n	8002e70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e03f      	b.n	8002f0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f85c 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f829 	bl	8002f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1c:	b0bd      	sub	sp, #244	; 0xf4
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f34:	68d9      	ldr	r1, [r3, #12]
 8002f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	ea40 0301 	orr.w	r3, r0, r1
 8002f40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f70:	f021 010c 	bic.w	r1, r1, #12
 8002f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f92:	6999      	ldr	r1, [r3, #24]
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	ea40 0301 	orr.w	r3, r0, r1
 8002f9e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002faa:	f040 81a5 	bne.w	80032f8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4bcd      	ldr	r3, [pc, #820]	; (80032ec <UART_SetConfig+0x3d4>)
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d006      	beq.n	8002fc8 <UART_SetConfig+0xb0>
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4bcb      	ldr	r3, [pc, #812]	; (80032f0 <UART_SetConfig+0x3d8>)
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f040 80cb 	bne.w	800315e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fc8:	f7fe fd32 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8002fcc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	f04f 0500 	mov.w	r5, #0
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	1891      	adds	r1, r2, r2
 8002fe0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002fea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fee:	1912      	adds	r2, r2, r4
 8002ff0:	eb45 0303 	adc.w	r3, r5, r3
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	00d9      	lsls	r1, r3, #3
 8002ffe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003002:	00d0      	lsls	r0, r2, #3
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	1911      	adds	r1, r2, r4
 800300a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800300e:	416b      	adcs	r3, r5
 8003010:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	1891      	adds	r1, r2, r2
 8003022:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003026:	415b      	adcs	r3, r3
 8003028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800302c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003030:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003034:	f7fd f8e6 	bl	8000204 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4bad      	ldr	r3, [pc, #692]	; (80032f4 <UART_SetConfig+0x3dc>)
 800303e:	fba3 2302 	umull	r2, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	011e      	lsls	r6, r3, #4
 8003046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800304a:	461c      	mov	r4, r3
 800304c:	f04f 0500 	mov.w	r5, #0
 8003050:	4622      	mov	r2, r4
 8003052:	462b      	mov	r3, r5
 8003054:	1891      	adds	r1, r2, r2
 8003056:	67b9      	str	r1, [r7, #120]	; 0x78
 8003058:	415b      	adcs	r3, r3
 800305a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800305c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003060:	1912      	adds	r2, r2, r4
 8003062:	eb45 0303 	adc.w	r3, r5, r3
 8003066:	f04f 0000 	mov.w	r0, #0
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	00d9      	lsls	r1, r3, #3
 8003070:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003074:	00d0      	lsls	r0, r2, #3
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	1911      	adds	r1, r2, r4
 800307c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003080:	416b      	adcs	r3, r5
 8003082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	461a      	mov	r2, r3
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	1891      	adds	r1, r2, r2
 8003094:	6739      	str	r1, [r7, #112]	; 0x70
 8003096:	415b      	adcs	r3, r3
 8003098:	677b      	str	r3, [r7, #116]	; 0x74
 800309a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800309e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80030a2:	f7fd f8af 	bl	8000204 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4b92      	ldr	r3, [pc, #584]	; (80032f4 <UART_SetConfig+0x3dc>)
 80030ac:	fba3 1302 	umull	r1, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	2164      	movs	r1, #100	; 0x64
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	3332      	adds	r3, #50	; 0x32
 80030be:	4a8d      	ldr	r2, [pc, #564]	; (80032f4 <UART_SetConfig+0x3dc>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030cc:	441e      	add	r6, r3
 80030ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030d2:	4618      	mov	r0, r3
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	1894      	adds	r4, r2, r2
 80030de:	66bc      	str	r4, [r7, #104]	; 0x68
 80030e0:	415b      	adcs	r3, r3
 80030e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80030e8:	1812      	adds	r2, r2, r0
 80030ea:	eb41 0303 	adc.w	r3, r1, r3
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	f04f 0500 	mov.w	r5, #0
 80030f6:	00dd      	lsls	r5, r3, #3
 80030f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030fc:	00d4      	lsls	r4, r2, #3
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	1814      	adds	r4, r2, r0
 8003104:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003108:	414b      	adcs	r3, r1
 800310a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	461a      	mov	r2, r3
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	1891      	adds	r1, r2, r2
 800311c:	6639      	str	r1, [r7, #96]	; 0x60
 800311e:	415b      	adcs	r3, r3
 8003120:	667b      	str	r3, [r7, #100]	; 0x64
 8003122:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800312a:	f7fd f86b 	bl	8000204 <__aeabi_uldivmod>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <UART_SetConfig+0x3dc>)
 8003134:	fba3 1302 	umull	r1, r3, r3, r2
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	2164      	movs	r1, #100	; 0x64
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	3332      	adds	r3, #50	; 0x32
 8003146:	4a6b      	ldr	r2, [pc, #428]	; (80032f4 <UART_SetConfig+0x3dc>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	f003 0207 	and.w	r2, r3, #7
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4432      	add	r2, r6
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	e26d      	b.n	800363a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800315e:	f7fe fc53 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8003162:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003166:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800316a:	461c      	mov	r4, r3
 800316c:	f04f 0500 	mov.w	r5, #0
 8003170:	4622      	mov	r2, r4
 8003172:	462b      	mov	r3, r5
 8003174:	1891      	adds	r1, r2, r2
 8003176:	65b9      	str	r1, [r7, #88]	; 0x58
 8003178:	415b      	adcs	r3, r3
 800317a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800317c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003180:	1912      	adds	r2, r2, r4
 8003182:	eb45 0303 	adc.w	r3, r5, r3
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	00d9      	lsls	r1, r3, #3
 8003190:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003194:	00d0      	lsls	r0, r2, #3
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	1911      	adds	r1, r2, r4
 800319c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80031a0:	416b      	adcs	r3, r5
 80031a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	1891      	adds	r1, r2, r2
 80031b4:	6539      	str	r1, [r7, #80]	; 0x50
 80031b6:	415b      	adcs	r3, r3
 80031b8:	657b      	str	r3, [r7, #84]	; 0x54
 80031ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80031c2:	f7fd f81f 	bl	8000204 <__aeabi_uldivmod>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <UART_SetConfig+0x3dc>)
 80031cc:	fba3 2302 	umull	r2, r3, r3, r2
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	011e      	lsls	r6, r3, #4
 80031d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031d8:	461c      	mov	r4, r3
 80031da:	f04f 0500 	mov.w	r5, #0
 80031de:	4622      	mov	r2, r4
 80031e0:	462b      	mov	r3, r5
 80031e2:	1891      	adds	r1, r2, r2
 80031e4:	64b9      	str	r1, [r7, #72]	; 0x48
 80031e6:	415b      	adcs	r3, r3
 80031e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031ee:	1912      	adds	r2, r2, r4
 80031f0:	eb45 0303 	adc.w	r3, r5, r3
 80031f4:	f04f 0000 	mov.w	r0, #0
 80031f8:	f04f 0100 	mov.w	r1, #0
 80031fc:	00d9      	lsls	r1, r3, #3
 80031fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003202:	00d0      	lsls	r0, r2, #3
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	1911      	adds	r1, r2, r4
 800320a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800320e:	416b      	adcs	r3, r5
 8003210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	461a      	mov	r2, r3
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	1891      	adds	r1, r2, r2
 8003222:	6439      	str	r1, [r7, #64]	; 0x40
 8003224:	415b      	adcs	r3, r3
 8003226:	647b      	str	r3, [r7, #68]	; 0x44
 8003228:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800322c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003230:	f7fc ffe8 	bl	8000204 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <UART_SetConfig+0x3dc>)
 800323a:	fba3 1302 	umull	r1, r3, r3, r2
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2164      	movs	r1, #100	; 0x64
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	3332      	adds	r3, #50	; 0x32
 800324c:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <UART_SetConfig+0x3dc>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800325a:	441e      	add	r6, r3
 800325c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003260:	4618      	mov	r0, r3
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	1894      	adds	r4, r2, r2
 800326c:	63bc      	str	r4, [r7, #56]	; 0x38
 800326e:	415b      	adcs	r3, r3
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003272:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003276:	1812      	adds	r2, r2, r0
 8003278:	eb41 0303 	adc.w	r3, r1, r3
 800327c:	f04f 0400 	mov.w	r4, #0
 8003280:	f04f 0500 	mov.w	r5, #0
 8003284:	00dd      	lsls	r5, r3, #3
 8003286:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800328a:	00d4      	lsls	r4, r2, #3
 800328c:	4622      	mov	r2, r4
 800328e:	462b      	mov	r3, r5
 8003290:	1814      	adds	r4, r2, r0
 8003292:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003296:	414b      	adcs	r3, r1
 8003298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800329c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	1891      	adds	r1, r2, r2
 80032aa:	6339      	str	r1, [r7, #48]	; 0x30
 80032ac:	415b      	adcs	r3, r3
 80032ae:	637b      	str	r3, [r7, #52]	; 0x34
 80032b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032b4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032b8:	f7fc ffa4 	bl	8000204 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <UART_SetConfig+0x3dc>)
 80032c2:	fba3 1302 	umull	r1, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2164      	movs	r1, #100	; 0x64
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <UART_SetConfig+0x3dc>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 0207 	and.w	r2, r3, #7
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4432      	add	r2, r6
 80032e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032ea:	e1a6      	b.n	800363a <UART_SetConfig+0x722>
 80032ec:	40011000 	.word	0x40011000
 80032f0:	40011400 	.word	0x40011400
 80032f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4bd1      	ldr	r3, [pc, #836]	; (8003644 <UART_SetConfig+0x72c>)
 8003300:	429a      	cmp	r2, r3
 8003302:	d006      	beq.n	8003312 <UART_SetConfig+0x3fa>
 8003304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4bcf      	ldr	r3, [pc, #828]	; (8003648 <UART_SetConfig+0x730>)
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 80ca 	bne.w	80034a6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003312:	f7fe fb8d 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8003316:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800331a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800331e:	461c      	mov	r4, r3
 8003320:	f04f 0500 	mov.w	r5, #0
 8003324:	4622      	mov	r2, r4
 8003326:	462b      	mov	r3, r5
 8003328:	1891      	adds	r1, r2, r2
 800332a:	62b9      	str	r1, [r7, #40]	; 0x28
 800332c:	415b      	adcs	r3, r3
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003334:	1912      	adds	r2, r2, r4
 8003336:	eb45 0303 	adc.w	r3, r5, r3
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	00d9      	lsls	r1, r3, #3
 8003344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003348:	00d0      	lsls	r0, r2, #3
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	eb12 0a04 	adds.w	sl, r2, r4
 8003352:	eb43 0b05 	adc.w	fp, r3, r5
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	008b      	lsls	r3, r1, #2
 800336c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003370:	0082      	lsls	r2, r0, #2
 8003372:	4650      	mov	r0, sl
 8003374:	4659      	mov	r1, fp
 8003376:	f7fc ff45 	bl	8000204 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4bb3      	ldr	r3, [pc, #716]	; (800364c <UART_SetConfig+0x734>)
 8003380:	fba3 2302 	umull	r2, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	011e      	lsls	r6, r3, #4
 8003388:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800338c:	4618      	mov	r0, r3
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	1894      	adds	r4, r2, r2
 8003398:	623c      	str	r4, [r7, #32]
 800339a:	415b      	adcs	r3, r3
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033a2:	1812      	adds	r2, r2, r0
 80033a4:	eb41 0303 	adc.w	r3, r1, r3
 80033a8:	f04f 0400 	mov.w	r4, #0
 80033ac:	f04f 0500 	mov.w	r5, #0
 80033b0:	00dd      	lsls	r5, r3, #3
 80033b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033b6:	00d4      	lsls	r4, r2, #3
 80033b8:	4622      	mov	r2, r4
 80033ba:	462b      	mov	r3, r5
 80033bc:	1814      	adds	r4, r2, r0
 80033be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80033c2:	414b      	adcs	r3, r1
 80033c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	008b      	lsls	r3, r1, #2
 80033de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033e2:	0082      	lsls	r2, r0, #2
 80033e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80033e8:	f7fc ff0c 	bl	8000204 <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4b96      	ldr	r3, [pc, #600]	; (800364c <UART_SetConfig+0x734>)
 80033f2:	fba3 1302 	umull	r1, r3, r3, r2
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2164      	movs	r1, #100	; 0x64
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a91      	ldr	r2, [pc, #580]	; (800364c <UART_SetConfig+0x734>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	441e      	add	r6, r3
 8003412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003416:	4618      	mov	r0, r3
 8003418:	f04f 0100 	mov.w	r1, #0
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	1894      	adds	r4, r2, r2
 8003422:	61bc      	str	r4, [r7, #24]
 8003424:	415b      	adcs	r3, r3
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342c:	1812      	adds	r2, r2, r0
 800342e:	eb41 0303 	adc.w	r3, r1, r3
 8003432:	f04f 0400 	mov.w	r4, #0
 8003436:	f04f 0500 	mov.w	r5, #0
 800343a:	00dd      	lsls	r5, r3, #3
 800343c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003440:	00d4      	lsls	r4, r2, #3
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	1814      	adds	r4, r2, r0
 8003448:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800344c:	414b      	adcs	r3, r1
 800344e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	008b      	lsls	r3, r1, #2
 8003468:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800346c:	0082      	lsls	r2, r0, #2
 800346e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003472:	f7fc fec7 	bl	8000204 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4b74      	ldr	r3, [pc, #464]	; (800364c <UART_SetConfig+0x734>)
 800347c:	fba3 1302 	umull	r1, r3, r3, r2
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	2164      	movs	r1, #100	; 0x64
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	3332      	adds	r3, #50	; 0x32
 800348e:	4a6f      	ldr	r2, [pc, #444]	; (800364c <UART_SetConfig+0x734>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4432      	add	r2, r6
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	e0c9      	b.n	800363a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80034a6:	f7fe faaf 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 80034aa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034b2:	461c      	mov	r4, r3
 80034b4:	f04f 0500 	mov.w	r5, #0
 80034b8:	4622      	mov	r2, r4
 80034ba:	462b      	mov	r3, r5
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	6139      	str	r1, [r7, #16]
 80034c0:	415b      	adcs	r3, r3
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034c8:	1912      	adds	r2, r2, r4
 80034ca:	eb45 0303 	adc.w	r3, r5, r3
 80034ce:	f04f 0000 	mov.w	r0, #0
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	00d9      	lsls	r1, r3, #3
 80034d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034dc:	00d0      	lsls	r0, r2, #3
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	eb12 0804 	adds.w	r8, r2, r4
 80034e6:	eb43 0905 	adc.w	r9, r3, r5
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	008b      	lsls	r3, r1, #2
 8003500:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003504:	0082      	lsls	r2, r0, #2
 8003506:	4640      	mov	r0, r8
 8003508:	4649      	mov	r1, r9
 800350a:	f7fc fe7b 	bl	8000204 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <UART_SetConfig+0x734>)
 8003514:	fba3 2302 	umull	r2, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	011e      	lsls	r6, r3, #4
 800351c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003520:	4618      	mov	r0, r3
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	1894      	adds	r4, r2, r2
 800352c:	60bc      	str	r4, [r7, #8]
 800352e:	415b      	adcs	r3, r3
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003536:	1812      	adds	r2, r2, r0
 8003538:	eb41 0303 	adc.w	r3, r1, r3
 800353c:	f04f 0400 	mov.w	r4, #0
 8003540:	f04f 0500 	mov.w	r5, #0
 8003544:	00dd      	lsls	r5, r3, #3
 8003546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800354a:	00d4      	lsls	r4, r2, #3
 800354c:	4622      	mov	r2, r4
 800354e:	462b      	mov	r3, r5
 8003550:	1814      	adds	r4, r2, r0
 8003552:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003556:	414b      	adcs	r3, r1
 8003558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	008b      	lsls	r3, r1, #2
 8003572:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003576:	0082      	lsls	r2, r0, #2
 8003578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800357c:	f7fc fe42 	bl	8000204 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <UART_SetConfig+0x734>)
 8003586:	fba3 1302 	umull	r1, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2164      	movs	r1, #100	; 0x64
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	3332      	adds	r3, #50	; 0x32
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <UART_SetConfig+0x734>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a4:	441e      	add	r6, r3
 80035a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035aa:	4618      	mov	r0, r3
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	1894      	adds	r4, r2, r2
 80035b6:	603c      	str	r4, [r7, #0]
 80035b8:	415b      	adcs	r3, r3
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c0:	1812      	adds	r2, r2, r0
 80035c2:	eb41 0303 	adc.w	r3, r1, r3
 80035c6:	f04f 0400 	mov.w	r4, #0
 80035ca:	f04f 0500 	mov.w	r5, #0
 80035ce:	00dd      	lsls	r5, r3, #3
 80035d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035d4:	00d4      	lsls	r4, r2, #3
 80035d6:	4622      	mov	r2, r4
 80035d8:	462b      	mov	r3, r5
 80035da:	1814      	adds	r4, r2, r0
 80035dc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80035e0:	414b      	adcs	r3, r1
 80035e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	008b      	lsls	r3, r1, #2
 80035fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003600:	0082      	lsls	r2, r0, #2
 8003602:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003606:	f7fc fdfd 	bl	8000204 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <UART_SetConfig+0x734>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	; 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	3332      	adds	r3, #50	; 0x32
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <UART_SetConfig+0x734>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4432      	add	r2, r6
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	e7ff      	b.n	800363a <UART_SetConfig+0x722>
 800363a:	bf00      	nop
 800363c:	37f4      	adds	r7, #244	; 0xf4
 800363e:	46bd      	mov	sp, r7
 8003640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003644:	40011000 	.word	0x40011000
 8003648:	40011400 	.word	0x40011400
 800364c:	51eb851f 	.word	0x51eb851f

08003650 <__libc_init_array>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	4d0d      	ldr	r5, [pc, #52]	; (8003688 <__libc_init_array+0x38>)
 8003654:	4c0d      	ldr	r4, [pc, #52]	; (800368c <__libc_init_array+0x3c>)
 8003656:	1b64      	subs	r4, r4, r5
 8003658:	10a4      	asrs	r4, r4, #2
 800365a:	2600      	movs	r6, #0
 800365c:	42a6      	cmp	r6, r4
 800365e:	d109      	bne.n	8003674 <__libc_init_array+0x24>
 8003660:	4d0b      	ldr	r5, [pc, #44]	; (8003690 <__libc_init_array+0x40>)
 8003662:	4c0c      	ldr	r4, [pc, #48]	; (8003694 <__libc_init_array+0x44>)
 8003664:	f000 f820 	bl	80036a8 <_init>
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	2600      	movs	r6, #0
 800366e:	42a6      	cmp	r6, r4
 8003670:	d105      	bne.n	800367e <__libc_init_array+0x2e>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	f855 3b04 	ldr.w	r3, [r5], #4
 8003678:	4798      	blx	r3
 800367a:	3601      	adds	r6, #1
 800367c:	e7ee      	b.n	800365c <__libc_init_array+0xc>
 800367e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003682:	4798      	blx	r3
 8003684:	3601      	adds	r6, #1
 8003686:	e7f2      	b.n	800366e <__libc_init_array+0x1e>
 8003688:	080036e0 	.word	0x080036e0
 800368c:	080036e0 	.word	0x080036e0
 8003690:	080036e0 	.word	0x080036e0
 8003694:	080036e4 	.word	0x080036e4

08003698 <memset>:
 8003698:	4402      	add	r2, r0
 800369a:	4603      	mov	r3, r0
 800369c:	4293      	cmp	r3, r2
 800369e:	d100      	bne.n	80036a2 <memset+0xa>
 80036a0:	4770      	bx	lr
 80036a2:	f803 1b01 	strb.w	r1, [r3], #1
 80036a6:	e7f9      	b.n	800369c <memset+0x4>

080036a8 <_init>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr

080036b4 <_fini>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr
